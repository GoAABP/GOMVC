using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using MySql.Data.MySqlClient;
using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;

public class D4_Otorgamiento_Creditos_Controller : Controller
{
    private readonly ILogger<D4_Otorgamiento_Creditos_Controller> _logger;
    private readonly IConfiguration _configuration;
    private readonly string _connectionString;
    private readonly string _filePath = @"C:\Users\Go Credit\Documents\DATA\FLAT FILES";
    private readonly string _historicFilePath = @"C:\Users\Go Credit\Documents\DATA\HISTORIC FILES";

    public D4_Otorgamiento_Creditos_Controller(ILogger<D4_Otorgamiento_Creditos_Controller> logger, IConfiguration configuration)
    {
        _logger = logger;
        _configuration = configuration;
        _connectionString = _configuration.GetConnectionString("DefaultConnection")!;
        
        // Register the encoding provider
        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
    }

    public async Task<IActionResult> D4_ProcessOtorgamientoCreditos()
    {
        var logPath = @"C:\Users\Go Credit\Documents\DATA\LOGS\BulkLoadOtorgamientoCreditos.log";
        var logBuilder = new StringBuilder();
        logBuilder.AppendLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - Process started.");
        _logger.LogInformation("Process started.");

        var files = Directory.GetFiles(_filePath, "BARTURO*.csv");
        if (files.Length == 0)
        {
            logBuilder.AppendLine("File not found.");
            _logger.LogError("File not found.");
            await D4_WriteLog(logBuilder.ToString(), logPath);
            return NotFound("No files found.");
        }

        var file = files[0];
        logBuilder.AppendLine($"File found: {file}");

        // Convert file encoding to UTF-8 with BOM
        var convertedFilePath = ConvertToUTF8WithBOM(file);
        logBuilder.AppendLine($"Converted file encoding to UTF-8 with BOM: {convertedFilePath}");

        // Optional: Validate the converted file
        ValidateFile(convertedFilePath, logBuilder);

        try
        {
            await D4_LoadDataToStageWithCondition(convertedFilePath, logBuilder);
            await D4_ExecuteInsert(logBuilder, logPath);
            D4_MoveFileToHistoric(file, logBuilder);
            D4_MoveFileToHistoric(convertedFilePath, logBuilder); // Move the converted file too
        }
        catch (Exception ex)
        {
            logBuilder.AppendLine($"Error during processing: {ex.Message}");
            _logger.LogError(ex, "Error during processing.");
            await D4_WriteLog(logBuilder.ToString(), logPath);
            return StatusCode(500, "Error during processing.");
        }

        logBuilder.AppendLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - Process completed successfully.");
        _logger.LogInformation("Process completed successfully.");
        await D4_WriteLog(logBuilder.ToString(), logPath);
        return Ok("File processed successfully.");
    }

    private async Task D4_LoadDataToStageWithCondition(string csvFilePath, StringBuilder logBuilder)
    {
        using (var connection = new MySqlConnection(_connectionString))
        {
            await connection.OpenAsync();
            using (var transaction = await connection.BeginTransactionAsync())
            {
                try
                {
                    // Convert the file to UTF-8 encoding before processing
                    logBuilder.AppendLine("Converting file encoding to UTF-8...");
                    var convertedFilePath = ConvertFileEncoding(csvFilePath, Encoding.GetEncoding("Windows-1252"), Encoding.UTF8);

                    var truncateCommand = new MySqlCommand("TRUNCATE TABLE D4_Stage_Otorgamiento_Creditos;", connection, transaction);
                    await truncateCommand.ExecuteNonQueryAsync();
                    logBuilder.AppendLine("Truncated table D4_Stage_Otorgamiento_Creditos.");
                    _logger.LogInformation("Truncated table D4_Stage_Otorgamiento_Creditos.");

                    using (var reader = new StreamReader(convertedFilePath, Encoding.UTF8))
                    {
                        string line;
                        bool isHeader = true;

                        while (!reader.EndOfStream)
                        {
                            line = await reader.ReadLineAsync();

                            if (isHeader)
                            {
                                isHeader = false;
                                continue;
                            }

                            var values = line.Split(',');

                            if (values.Length > 0 && values[0].Trim() == "0")
                            {
                                logBuilder.AppendLine("Encountered row with '0' in the first column. Stopping further insertion.");
                                break;
                            }

                            try
                            {
                                var insertCommand = new MySqlCommand(@"
                                    INSERT INTO D4_Stage_Otorgamiento_Creditos (
                                        Id_Credito, Referencia, Nombre, Fecha_Apertura, F_Cobro, Id_Convenio, Convenio, Id_Sucursal, Sucursal,
                                        Capital, Primer_Pago, Comision, IVA, Cobertura, IVA_Cobertura, Disposicion, Monto_Retenido, Pago_de_Deuda,
                                        Comision_Financiada, IVA_Comision_Financiada, Solicitud, Vendedor, Nombre_Vendedor, TipoVendedor, vSupervisorId,
                                        vSupName, Producto, Descripcion_Tasa, Persona, Plazo, Id_Producto, vCampaign, Tipo_de_Financiamiento,
                                        vFinancingTypeId, vAliado
                                    ) VALUES (
                                        @Id_Credito, @Referencia, @Nombre, @Fecha_Apertura, @F_Cobro, @Id_Convenio, @Convenio, @Id_Sucursal, @Sucursal,
                                        @Capital, @Primer_Pago, @Comision, @IVA, @Cobertura, @IVA_Cobertura, @Disposicion, @Monto_Retenido, @Pago_de_Deuda,
                                        @Comision_Financiada, @IVA_Comision_Financiada, @Solicitud, @Vendedor, @Nombre_Vendedor, @TipoVendedor, @vSupervisorId,
                                        @vSupName, @Producto, @Descripcion_Tasa, @Persona, @Plazo, @Id_Producto, @vCampaign, @Tipo_de_Financiamiento,
                                        @vFinancingTypeId, @vAliado
                                    );", connection, transaction);

                                insertCommand.Parameters.AddWithValue("@Id_Credito", ParseInteger(values[0]));
                                insertCommand.Parameters.AddWithValue("@Referencia", ParseString(values[1]));
                                insertCommand.Parameters.AddWithValue("@Nombre", ParseString(values[2]));
                                insertCommand.Parameters.AddWithValue("@Fecha_Apertura", ParseDate(values[3]));
                                insertCommand.Parameters.AddWithValue("@F_Cobro", ParseDate(values[4]));
                                insertCommand.Parameters.AddWithValue("@Id_Convenio", ParseInteger(values[5]));
                                insertCommand.Parameters.AddWithValue("@Convenio", ParseString(values[6]));
                                insertCommand.Parameters.AddWithValue("@Id_Sucursal", ParseInteger(values[7]));
                                insertCommand.Parameters.AddWithValue("@Sucursal", ParseString(values[8]));
                                insertCommand.Parameters.AddWithValue("@Capital", ParseDecimal(values[9]));
                                insertCommand.Parameters.AddWithValue("@Primer_Pago", ParseDate(values[10]));
                                insertCommand.Parameters.AddWithValue("@Comision", ParseDecimal(values[11]));
                                insertCommand.Parameters.AddWithValue("@IVA", ParseDecimal(values[12]));
                                insertCommand.Parameters.AddWithValue("@Cobertura", ParseDecimal(values[13]));
                                insertCommand.Parameters.AddWithValue("@IVA_Cobertura", ParseDecimal(values[14]));
                                insertCommand.Parameters.AddWithValue("@Disposicion", ParseDecimal(values[15]));
                                insertCommand.Parameters.AddWithValue("@Monto_Retenido", ParseDecimal(values[16]));
                                insertCommand.Parameters.AddWithValue("@Pago_de_Deuda", ParseDecimal(values[17]));
                                insertCommand.Parameters.AddWithValue("@Comision_Financiada", ParseDecimal(values[18]));
                                insertCommand.Parameters.AddWithValue("@IVA_Comision_Financiada", ParseDecimal(values[19]));
                                insertCommand.Parameters.AddWithValue("@Solicitud", ParseString(values[20]));
                                insertCommand.Parameters.AddWithValue("@Vendedor", ParseInteger(values[21]));
                                insertCommand.Parameters.AddWithValue("@Nombre_Vendedor", ParseString(values[22]));
                                insertCommand.Parameters.AddWithValue("@TipoVendedor", ParseString(values[23]));
                                insertCommand.Parameters.AddWithValue("@vSupervisorId", ParseInteger(values[24]));
                                insertCommand.Parameters.AddWithValue("@vSupName", ParseString(values[25]));
                                insertCommand.Parameters.AddWithValue("@Producto", ParseString(values[26]));
                                insertCommand.Parameters.AddWithValue("@Descripcion_Tasa", ParseString(values[27]));
                                insertCommand.Parameters.AddWithValue("@Persona", ParseString(values[28]));
                                insertCommand.Parameters.AddWithValue("@Plazo", ParseInteger(values[29]));
                                insertCommand.Parameters.AddWithValue("@Id_Producto", ParseInteger(values[30]));
                                insertCommand.Parameters.AddWithValue("@vCampaign", ParseString(values[31]));
                                insertCommand.Parameters.AddWithValue("@Tipo_de_Financiamiento", ParseString(values[32]));
                                insertCommand.Parameters.AddWithValue("@vFinancingTypeId", ParseString(values[33]));
                                insertCommand.Parameters.AddWithValue("@vAliado", ParseString(values[34]));

                                await insertCommand.ExecuteNonQueryAsync();
                            }
                            catch (Exception ex)
                            {
                                logBuilder.AppendLine($"Error processing row: {line} - {ex.Message}");
                                _logger.LogWarning($"Error processing row: {line} - {ex.Message}");
                                throw;
                            }
                        }
                    }

                    await transaction.CommitAsync();
                    logBuilder.AppendLine("Data loaded into D4_Stage_Otorgamiento_Creditos.");

                    // Move the converted file to historic folder
                    D4_MoveFileToHistoric(convertedFilePath, logBuilder);
                    logBuilder.AppendLine("Converted file moved to historic folder.");
                }
                catch (Exception ex)
                {
                    await transaction.RollbackAsync();
                    logBuilder.AppendLine($"Error loading data into stage table: {ex.Message}");
                    throw;
                }
            }
        }
    }

    private string ConvertFileEncoding(string filePath, Encoding sourceEncoding, Encoding targetEncoding)
    {
        var newFilePath = Path.Combine(
            Path.GetDirectoryName(filePath)!,
            Path.GetFileNameWithoutExtension(filePath) + "_utf8" + Path.GetExtension(filePath)
        );

        using (var reader = new StreamReader(filePath, sourceEncoding))
        using (var writer = new StreamWriter(newFilePath, false, targetEncoding))
        {
            writer.Write(reader.ReadToEnd());
        }

        return newFilePath;
    }

    private async Task D4_ExecuteInsert(StringBuilder logBuilder, string logPath)
    {
        var sqlInsertCommand = @"
            INSERT INTO D4_Otorgamiento_Creditos (
                Id_Credito, Referencia, Nombre, Fecha_Apertura, F_Cobro, Id_Convenio, Convenio, Id_Sucursal, Sucursal,
                Capital, Primer_Pago, Comision, IVA, Cobertura, IVA_Cobertura, Disposicion, Monto_Retenido, Pago_de_Deuda,
                Comision_Financiada, IVA_Comision_Financiada, Solicitud, Vendedor, Nombre_Vendedor, TipoVendedor, vSupervisorId,
                vSupName, Producto, Descripcion_Tasa, Persona, Plazo, Id_Producto, vCampaign, Tipo_de_Financiamiento,
                vFinancingTypeId, vAliado
            )
            SELECT 
                Id_Credito, Referencia, Nombre, Fecha_Apertura, F_Cobro, Id_Convenio, Convenio, Id_Sucursal, Sucursal,
                Capital, Primer_Pago, Comision, IVA, Cobertura, IVA_Cobertura, Disposicion, Monto_Retenido, Pago_de_Deuda,
                Comision_Financiada, IVA_Comision_Financiada, Solicitud, Vendedor, Nombre_Vendedor, TipoVendedor, vSupervisorId,
                vSupName, Producto, Descripcion_Tasa, Persona, Plazo, Id_Producto, vCampaign, Tipo_de_Financiamiento,
                vFinancingTypeId, vAliado
            FROM D4_Stage_Otorgamiento_Creditos
            WHERE NOT EXISTS (
                SELECT 1
                FROM D4_Otorgamiento_Creditos
                WHERE 
                    D4_Otorgamiento_Creditos.Id_Credito = D4_Stage_Otorgamiento_Creditos.Id_Credito
                    AND D4_Otorgamiento_Creditos.Referencia = D4_Stage_Otorgamiento_Creditos.Referencia
                    AND D4_Otorgamiento_Creditos.Nombre = D4_Stage_Otorgamiento_Creditos.Nombre
                    AND D4_Otorgamiento_Creditos.Fecha_Apertura = D4_Stage_Otorgamiento_Creditos.Fecha_Apertura
            );";

        using (var connection = new MySqlConnection(_connectionString))
        {
            await connection.OpenAsync();
            using (var transaction = await connection.BeginTransactionAsync())
            {
                try
                {
                    var command = new MySqlCommand(sqlInsertCommand, connection, transaction);
                    await command.ExecuteNonQueryAsync();
                    logBuilder.AppendLine("Data inserted into D4_Otorgamiento_Creditos.");
                    await transaction.CommitAsync();
                }
                catch (Exception ex)
                {
                    await transaction.RollbackAsync();
                    logBuilder.AppendLine($"Error inserting data: {ex.Message}");
                    throw;
                }
            }
        }
    }


    private string? ParseString(string value)
    {
        return string.IsNullOrWhiteSpace(value) ? null : value.Trim('"').Trim();
    }

    private int? ParseInteger(string value)
    {
        value = value.Trim('"').Trim();
        return string.IsNullOrWhiteSpace(value) ? null : (int.TryParse(value, out var result) ? result : null);
    }

    private decimal? ParseDecimal(string value)
    {
        value = value.Trim('"').Trim();
        return string.IsNullOrWhiteSpace(value) ? null : (decimal.TryParse(value, out var result) ? result : null);
    }

    private DateTime? ParseDate(string value)
    {
        value = value.Trim('"').Trim();
        return string.IsNullOrWhiteSpace(value) ? null : (DateTime.TryParse(value, out var result) ? result : null);
    }

    private void D4_MoveFileToHistoric(string filePath, StringBuilder logBuilder)
    {
        var timestamp = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
        var historicFilePath = Path.Combine(_historicFilePath, $"{Path.GetFileNameWithoutExtension(filePath)}_{timestamp}{Path.GetExtension(filePath)}");
        System.IO.File.Move(filePath, historicFilePath);
        logBuilder.AppendLine($"Moved file to historic: {historicFilePath}");
    }

    private async Task D4_WriteLog(string logContent, string logPath)
    {
        var timestamp = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
        var uniqueLogPath = Path.Combine(
            Path.GetDirectoryName(logPath)!,
            $"{Path.GetFileNameWithoutExtension(logPath)}_{timestamp}{Path.GetExtension(logPath)}"
        );

        await System.IO.File.WriteAllTextAsync(uniqueLogPath, logContent);
        _logger.LogInformation($"Log written to: {uniqueLogPath}");
    }

    private void ValidateFile(string filePath, StringBuilder logBuilder)
    {
        using (var reader = new StreamReader(filePath, Encoding.UTF8))
        {
            while (!reader.EndOfStream)
            {
                string line = reader.ReadLine();
                if (line.Contains("�"))
                {
                    logBuilder.AppendLine($"Warning: Line contains invalid characters: {line}");
                }
            }
        }
    }

    private string ConvertToUTF8WithBOM(string filePath)
    {
        // Register the encoding provider to handle legacy encodings like Windows-1252
        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        var newFilePath = Path.Combine(
            Path.GetDirectoryName(filePath)!,
            Path.GetFileNameWithoutExtension(filePath) + "_utf8" + Path.GetExtension(filePath)
        );

        // Use Windows-1252 encoding for reading and UTF-8 with BOM for writing
        using (var reader = new StreamReader(filePath, Encoding.GetEncoding("Windows-1252")))
        using (var writer = new StreamWriter(newFilePath, false, new UTF8Encoding(true)))
        {
            while (!reader.EndOfStream)
            {
                writer.WriteLine(reader.ReadLine());
            }
        }

        return newFilePath;
    }    
}
