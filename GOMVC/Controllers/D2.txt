using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using MySql.Data.MySqlClient;
using ClosedXML.Excel;
using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

public class D5_Gestiones_Controller : Controller
{
    private readonly ILogger<D5_Gestiones_Controller> _logger;
    private readonly IConfiguration _configuration;
    private readonly string _connectionString;
    private readonly string _filePath = @"C:\Users\Go Credit\Documents\DATA\FLAT FILES";
    private readonly string _historicFilePath = @"C:\Users\Go Credit\Documents\DATA\HISTORIC FILES";

    public D5_Gestiones_Controller(ILogger<D5_Gestiones_Controller> logger, IConfiguration configuration)
    {
        _logger = logger;
        _configuration = configuration;
        _connectionString = _configuration.GetConnectionString("DefaultConnection")!;
    }

    [HttpPost]
    public async Task<IActionResult> D5_ProcessGestiones()
    {
        var logPath = @"C:\Users\Go Credit\Documents\DATA\LOGS\D5_Gestiones.log";
        var historicLogsFolder = Path.Combine(_historicFilePath, "Logs");
        var archiveFolder = Path.Combine(_historicFilePath, "Archive");
        var processedFolder = Path.Combine(_historicFilePath, "Processed");
        var errorFolder = Path.Combine(_historicFilePath, "Error");
        var logBuilder = new StringBuilder();
        var hasErrors = false;

        logBuilder.AppendLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - D5 process started.");
        _logger.LogInformation("D5 process started.");

        var files = Directory.GetFiles(_filePath, "Re_GestionesRO_*.xlsx");
        if (files.Length == 0)
        {
            var errorLog = "No files matching 'Re_GestionesRO_*.xlsx' found.";
            logBuilder.AppendLine(errorLog);
            _logger.LogError(errorLog);
            await D5_WriteLog(logBuilder.ToString(), logPath);
            return NotFound(errorLog);
        }

        foreach (var file in files)
        {
            logBuilder.AppendLine($"Processing file: {file}");

            try
            {
                // Step 1: Preprocess the Excel file
                var sanitizedFilePath = D5_PreprocessXlsxFile(file, logBuilder);
                logBuilder.AppendLine($"Sanitized file: {sanitizedFilePath}");

                // Step 2: Convert Excel to CSV for bulk loading
                var csvFilePath = D5_ConvertXlsxToCsv(sanitizedFilePath, logBuilder);
                logBuilder.AppendLine($"Converted file to CSV: {csvFilePath}");

                // Step 3: Bulk load data into staging table
                await D5_BulkInsertToStage(csvFilePath, logBuilder);

                // Step 4: Insert validated data into the final table
                await D5_InsertValidatedData(logBuilder);

                // Step 5: Move files to archive/processed folders
                D5_MoveFile(file, archiveFolder, logBuilder);
                D5_MoveFile(sanitizedFilePath, processedFolder, logBuilder);
                D5_MoveFile(csvFilePath, processedFolder, logBuilder);

                logBuilder.AppendLine($"File {file} processed successfully.");
            }
            catch (Exception ex)
            {
                logBuilder.AppendLine($"Error processing file {file}: {ex.Message}");
                _logger.LogError(ex, $"Error processing file {file}");
                hasErrors = true;

                // Move problematic files to error folder
                D5_MoveFile(file, errorFolder, logBuilder);
            }
        }

        logBuilder.AppendLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - D5 process completed.");
        _logger.LogInformation("D5 process completed.");
        await D5_WriteLog(logBuilder.ToString(), logPath);

        // Move the log to the historic folder
        D5_MoveLogToHistoric(logPath, historicLogsFolder);

        return hasErrors
            ? StatusCode(500, "D5 process completed with errors. Check the log for details.")
            : Ok("D5 process completed successfully.");
    }
    
    private string D5_PreprocessXlsxFile(string inputFilePath, StringBuilder logBuilder)
    {
        var sanitizedFilePath = Path.Combine(
            Path.GetDirectoryName(inputFilePath)!,
            Path.GetFileNameWithoutExtension(inputFilePath) + "_sanitized.xlsx"
        );

        try
        {
            using (var workbook = new XLWorkbook(inputFilePath))
            {
                var worksheet = workbook.Worksheet(1);
                var sanitizedWorkbook = new XLWorkbook();
                var sanitizedWorksheet = sanitizedWorkbook.AddWorksheet("Sanitized");

                int sanitizedRow = 1;
                foreach (var row in worksheet.RowsUsed())
                {
                    if (row.RowNumber() == 1)
                    {
                        // Copy header row
                        for (int col = 1; col <= row.CellCount(); col++)
                        {
                            sanitizedWorksheet.Cell(sanitizedRow, col).Value = row.Cell(col).Value;
                        }
                        sanitizedRow++;
                        continue;
                    }

                    var firstColumnValue = row.Cell(1).GetValue<string>().Trim();
                    if (firstColumnValue == "0") // Stopper logic
                    {
                        logBuilder.AppendLine("Stopper '0' found. Stopping further processing.");
                        break;
                    }

                    // Copy valid row to sanitized worksheet
                    for (int col = 1; col <= row.CellCount(); col++)
                    {
                        sanitizedWorksheet.Cell(sanitizedRow, col).Value = row.Cell(col).Value;
                    }
                    sanitizedRow++;
                }

                sanitizedWorkbook.SaveAs(sanitizedFilePath);
                logBuilder.AppendLine($"File sanitized successfully: {sanitizedFilePath}");
            }
        }
        catch (Exception ex)
        {
            logBuilder.AppendLine($"Error during file sanitization: {ex.Message}");
            throw;
        }

        return sanitizedFilePath;
    }

    private string D5_ConvertXlsxToCsv(string xlsxFilePath, StringBuilder logBuilder)
    {
        var csvFilePath = Path.Combine(
            Path.GetDirectoryName(xlsxFilePath)!,
            Path.GetFileNameWithoutExtension(xlsxFilePath) + ".csv"
        );

        try
        {
            using (var workbook = new XLWorkbook(xlsxFilePath))
            using (var writer = new StreamWriter(csvFilePath))
            {
                var worksheet = workbook.Worksheet(1);
                foreach (var row in worksheet.RowsUsed())
                {
                    var values = row.Cells().Select(cell => cell.GetValue<string>());
                    writer.WriteLine(string.Join(",", values));
                }
            }

            logBuilder.AppendLine($"Converted Excel file to CSV: {csvFilePath}");
        }
        catch (Exception ex)
        {
            logBuilder.AppendLine($"Error converting Excel to CSV: {ex.Message}");
            throw;
        }

        return csvFilePath;
    }

    private async Task D5_BulkInsertToStage(string csvFilePath, StringBuilder logBuilder)
    {
        using (var connection = new MySqlConnection(_connectionString))
        {
            await connection.OpenAsync();
            using (var transaction = await connection.BeginTransactionAsync())
            {
                try
                {
                    // Truncate the staging table to ensure it's empty before loading new data
                    var truncateCommand = new MySqlCommand("TRUNCATE TABLE D5_Stage_Gestiones;", connection, transaction);
                    await truncateCommand.ExecuteNonQueryAsync();
                    logBuilder.AppendLine("Truncated table D5_Stage_Gestiones.");
                    _logger.LogInformation("Truncated table D5_Stage_Gestiones.");

                    // Bulk insert data from the CSV file into the staging table
                    var loadCommandText = $"LOAD DATA LOCAL INFILE '{csvFilePath.Replace("\\", "\\\\")}' " +
                                        "INTO TABLE D5_Stage_Gestiones " +
                                        "FIELDS TERMINATED BY ',' " +
                                        "ENCLOSED BY '\"' " +
                                        "LINES TERMINATED BY '\\n' " +
                                        "IGNORE 1 LINES;";

                    var loadCommand = new MySqlCommand(loadCommandText, connection, transaction);
                    await loadCommand.ExecuteNonQueryAsync();
                    logBuilder.AppendLine("Bulk inserted data into D5_Stage_Gestiones.");
                    _logger.LogInformation("Bulk inserted data into D5_Stage_Gestiones.");

                    await transaction.CommitAsync();
                }
                catch (Exception ex)
                {
                    await transaction.RollbackAsync();
                    logBuilder.AppendLine($"Error during bulk insert: {ex.Message}");
                    _logger.LogError(ex, "Error during bulk insert.");
                    throw;
                }
            }
        }
    }

    private async Task D5_InsertValidatedData(StringBuilder logBuilder)
    {
        var sqlInsertCommand = @"
            INSERT INTO D5_Gestiones (
                Indice, Agencia_Registro, Causa_No_Pago, Causa_No_Domiciliacion, Codigo_Accion, Codigo_Resultado,
                Comentarios, Contacto_Generado, Coordenadas, Credito, Estatus_Promesa, Fecha_Actividad,
                Fecha_Promesa, Monto_Promesa, Origen, Producto, Resultado, Telefono, Tipo_Pago, Usuario_Registro
            )
            SELECT 
                s.Indice, s.Agencia_Registro, s.Causa_No_Pago, s.Causa_No_Domiciliacion, s.Codigo_Accion, s.Codigo_Resultado,
                s.Comentarios, s.Contacto_Generado, s.Coordenadas, s.Credito, s.Estatus_Promesa,
                STR_TO_DATE(NULLIF(s.Fecha_Actividad, ''), '%d/%m/%Y') AS Fecha_Actividad,
                STR_TO_DATE(NULLIF(s.Fecha_Promesa, ''), '%d/%m/%Y') AS Fecha_Promesa,
                s.Monto_Promesa, s.Origen, s.Producto, s.Resultado, s.Telefono, s.Tipo_Pago, s.Usuario_Registro
            FROM D5_Stage_Gestiones s
            WHERE NOT EXISTS (
                SELECT 1 
                FROM D5_Gestiones d
                WHERE 
                    s.Indice = d.Indice AND
                    s.Agencia_Registro = d.Agencia_Registro AND
                    s.Causa_No_Pago = d.Causa_No_Pago AND
                    s.Causa_No_Domiciliacion = d.Causa_No_Domiciliacion AND
                    s.Codigo_Accion = d.Codigo_Accion AND
                    s.Codigo_Resultado = d.Codigo_Resultado AND
                    s.Fecha_Actividad = d.Fecha_Actividad
            );";

        using (var connection = new MySqlConnection(_connectionString))
        {
            await connection.OpenAsync();
            using (var transaction = await connection.BeginTransactionAsync())
            {
                try
                {
                    var command = new MySqlCommand(sqlInsertCommand, connection, transaction);
                    var rowsAffected = await command.ExecuteNonQueryAsync();

                    logBuilder.AppendLine($"Inserted {rowsAffected} rows into D5_Gestiones.");
                    _logger.LogInformation($"Inserted {rowsAffected} rows into D5_Gestiones.");

                    await transaction.CommitAsync();
                }
                catch (Exception ex)
                {
                    await transaction.RollbackAsync();
                    logBuilder.AppendLine($"Error during insert into final table: {ex.Message}");
                    _logger.LogError(ex, "Error during insert into final table.");
                    throw;
                }
            }
        }
    }

    private void D5_MoveFile(string sourceFilePath, string destinationFolder, StringBuilder logBuilder)
    {
        try
        {
            if (!Directory.Exists(destinationFolder))
            {
                Directory.CreateDirectory(destinationFolder);
            }

            var destinationFilePath = Path.Combine(destinationFolder, Path.GetFileName(sourceFilePath));
            if (System.IO.File.Exists(destinationFilePath))
            {
                System.IO.File.Delete(destinationFilePath); // Overwrite existing file
            }

            System.IO.File.Move(sourceFilePath, destinationFilePath);
            logBuilder.AppendLine($"Moved file: {sourceFilePath} -> {destinationFilePath}");
            _logger.LogInformation($"Moved file: {sourceFilePath} -> {destinationFilePath}");
        }
        catch (Exception ex)
        {
            logBuilder.AppendLine($"Error moving file {sourceFilePath} to {destinationFolder}: {ex.Message}");
            _logger.LogError(ex, $"Error moving file {sourceFilePath} to {destinationFolder}");
        }
    }

    private void D5_MoveLogToHistoric(string logPath, string historicLogsFolder)
    {
        try
        {
            if (!System.IO.File.Exists(logPath))
            {
                _logger.LogWarning($"Log file does not exist: {logPath}");
                return;
            }

            if (!Directory.Exists(historicLogsFolder))
            {
                Directory.CreateDirectory(historicLogsFolder);
            }

            var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
            var logFileName = Path.GetFileNameWithoutExtension(logPath) + $"_{timestamp}" + Path.GetExtension(logPath);
            var destinationFilePath = Path.Combine(historicLogsFolder, logFileName);

            System.IO.File.Move(logPath, destinationFilePath);
            _logger.LogInformation($"Log file moved to historic folder: {destinationFilePath}");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error moving log file to historic folder: {ex.Message}");
            throw;
        }
    }

    private async Task D5_WriteLog(string content, string logPath)
    {
        try
        {
            if (!Directory.Exists(Path.GetDirectoryName(logPath)))
            {
                Directory.CreateDirectory(Path.GetDirectoryName(logPath)!);
            }

            await System.IO.File.WriteAllTextAsync(logPath, content);
            _logger.LogInformation($"Log written to: {logPath}");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error writing log to {logPath}");
            throw;
        }
    }

}

